" {{{ set vimfiles path
if has("unix")
    let g:vimfiles=escape(expand("~/.vim"), ' ')
else
    let g:vimfiles=escape(expand("~/vimfiles"), ' ')
endif
"}}}

" {{{ configuration files
" {{{ global options for autocommands
let g:pathToRc=split(&runtimepath, ",")[0] . "/config/autocommandrc"
if has("autocmd") && filereadable(pathToRc)
    execute "source " . pathToRc
endif
"}}}

" {{{ global options for functions
let g:pathToRc=split(&runtimepath, ",")[0] . "/config/functionrc"
if filereadable(pathToRc)
    execute "source " . pathToRc
endif
"}}}

" {{{ global keyboard mappings
let g:pathToRc=split(&runtimepath, ",")[0] . "/config/mappingsrc"
if filereadable(pathToRc)
    execute "source " . pathToRc
endif
"}}}

" {{{ global options for plugins
let g:pathToRc=split(&runtimepath, ",")[0] . "/config/pluginrc"
if filereadable(pathToRc)
    execute "source " . pathToRc
endif
"}}}
"}}}

" {{{ macros
" {{{ MatchIt plugin
runtime! macros/matchit.vim
"}}}
"}}}

" {{{ filetype
" Vim can detect the type of file that is edited. This is done by checking the
" file name and sometimes by inspecting the contents of the file for specific
" text.
if has("autocmd")
    filetype plugin indent on
endif
"}}}

" {{{ syntax
" Syntax highlighting enables Vim to show parts of the text in another font or
" color. Those parts can be specific keywords or text matching a pattern. Vim
" doesn't parse the whole file (to keep it fast), so the highlighting has its
" limitations. Lexical highlighting might be a better name, but since everybody
" calls it syntax highlighting we'll stick with that. Vim supports syntax
" highlighting on all terminals. But since most ordinary terminals have very
" limited highlighting possibilities, it works best in the GUI version, gvim.
if has("syntax") && !exists("g:syntax_on")
    syntax enable
endif
"}}}

" {{{ colorscheme
" Output the name of the currently active color scheme.
" This is basically the same as
"	:echo g:colors_name
" In case g:colors_name has not been defined :colo will output "default". When
" compiled without the |+eval| feature it will output "unknown".
if ! empty(globpath(&runtimepath, "colors/primary.vim"))
    colorscheme primary
elseif ! empty(globpath(&runtimepath, "colors/OceanicNext.vim"))
    colorscheme OceanicNext
elseif ! empty(globpath(&runtimepath, "colors/detailed.vim"))
    colorscheme detailed
else
    colorscheme evening
endif
"}}}

" {{{ options
" {{{ autoindent
" Copy indent from current line when starting a new line (typing <CR> in
" Insert mode or when using the "o" or "O" command). If you do not type
" anything on the new line except <BS> or CTRL-D and then type <Esc>, CTRL-O
" or <CR>, the indent is deleted again. Moving the cursor to another line has
" the same effect, unless the "I" flag is included in "cpoptions".
" When autoindent is on, formatting (with the "gq" command or when you reach
" "textwidth" in Insert mode) uses the indentation of the first line.
" When "smartindent" or "cindent" is on the indent is changed in a different
" way.
" The "autoindent" option is reset when the "paste" option is set. {small
" difference from Vi: After the indent is deleted when typing <Esc> or <CR>,
" the cursor position when moving up or down is after the deleted indent; Vi
" puts the cursor somewhere in the deleted indent}.
set autoindent
"}}}

" {{{ autoread
" When a file has been detected to have been changed outside of Vim and it has
" not been changed inside of Vim, automatically read it again. When the file
" has been deleted this is not done.
set autoread
"}}}

" {{{ background
" When set to "dark", Vim will try to use colors that look good on a dark
" background.  When set to "light", Vim will try to use colors that look good on
" a light background.  Any other value is illegal. Vim tries to set the default
" value according to the terminal used. This will not always be correct.
set background=dark
"}}}

" {{{ backspace
" Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert mode.
" This is a list of items, separated by commas. Each item allows a way to
" backspace over something:
"	value	effect
"	indent	allow backspacing over autoindent
"	eol	allow backspacing over line breaks (join lines)
"	start	allow backspacing over the start of insert; CTRL-W and CTRL-U
"		stop once at the start of insert.
set backspace=indent,eol,start
"}}}

" {{{ backup
" Make a backup before overwriting a file. Leave it around after the file has
" been successfully written. If you do not want to keep the backup file, but you
" do want a backup while the file is being written, reset this option and set
" the "writebackup" option (this is the default). If you do not want a backup
" file at all reset both options (use this if your file system is almost full).
" See the |backup-table| for more explanations.
set nobackup
"}}}

" {{{ cindent
" Enables automatic C program indenting. See "cinkeys" to set the keys that
" trigger reindenting in insert mode and "cinoptions" to set your preferred
" indent style.
" If "indentexpr" is not empty, it overrules "cindent".
" If "lisp" is not on and both "indentexpr" and "equalprg" are empty, the "="
" operator indents using this algorithm rather than calling an external
" program.
set cindent
"}}}

" {{{ cmdwinheight
" Number of screen lines to use for the command-line window.
set cmdwinheight=5
"}}}

" {{{ colorcolumn
" "colorcolumn" is a comma separated list of screen columns that are
" highlighted with ColorColumn |hl-ColorColumn|. Useful to align text. Will
" make screen redrawing slower. The screen column can be an absolute number,
" or a number preceded with '+' or "-", which is added to or subtracted from
" "textwidth".
"	:set cc=+1		" highlight column after "textwidth"
"	:set cc=+1,+2,+3	" highlight three columns after "textwidth"
"	:hi ColorColumn ctermbg=lightgrey guibg=lightgrey
" When "textwidth" is zero then the items with "-" and '+' are not used. A
" maximum of 256 columns are highlighted.
if v:version >= 703
    set colorcolumn=+1
endif
"}}}

" {{{ complete
" This option specifies how keyword completion |ins-completion| works when
" CTRL-P or CTRL-N are used. It is also used for whole-line completion
" |i_CTRL-X_CTRL-L|. It indicates the type of completion and the places to
" scan.
set complete-=kdti complete+=kdti
"}}}

" {{{ completeopt
" A comma separated list of options for Insert mode completion ins-completion.
set completeopt=menuone,longest,preview
"}}}

" {{{ confirm
" When "confirm" is on, certain operations that would normally fail because of
" unsaved changes to a buffer, e.g. ":q" and ":e", instead raise a |dialog|
" asking if you wish to save the current file(s). You can still use a ! to
" unconditionally |abandon| a buffer.
set confirm
"}}}

" {{{ cscope
if has("cscope")
    " {{{ cscopetag
    " If "cscopetag" is set, the commands ":tag" and CTRL-] as well as "vim -t"
    " will always use |:cstag| instead of the default :tag behavior.
    " Effectively, by setting "cst", you will always search your cscope
    " databases as well as your tag files. The default is off.
    set cscopetag
    "}}}}

    " {{{ cscopeverbose
    " If "cscopeverbose" is not set (the default), messages will not be printed
    " indicating success or failure when adding a cscope database. Ideally, you
    " should reset this option in your |.vimrc| before adding any cscope
    " databases, and after adding them, set it. From then on, when you add more
    " databases within Vim, you will get a (hopefully) useful message should the
    " database fail to be added.
    set nocscopeverbose
    "}}}

    " {{{ add any database in current directory
    if filereadable("./.git/cscope.out")
        cscope add ./.git/cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cscope add $CSCOPE_DB
    endif
    "}}}
endif
"}}}

" {{{ cursorcolumn
" Highlight the screen column of the cursor with CursorColumn |hl-CursorColumn|.
" Useful to align text. Will make screen redrawing slower.
" If you only want the highlighting in the current window you can use these
" autocommands
set cursorcolumn
"}}}

" {{{ cursorline
" Highlight the screen line of the cursor with CursorLine |hl-CursorLine|.
" Useful to easily spot the cursor. Will make screen redrawing slower.
" When Visual mode is active the highlighting isn't used to make it easier to
" see the selected text.
set cursorline
"}}}

" {{{ dictionary
" List of file names, separated by commas, that are used to lookup words for
" keyword completion commands |i_CTRL-X_CTRL-K|. Each file should contain a
" list of words. This can be one word per line, or several words per line,
" separated by non-keyword characters (whitespace is preferred). Maximum line
" length is 510 bytes.
set dictionary+=/usr/share/dict/words
"}}}

" {{{ diffopt
" Option settings for diff mode. It can consist of the following items. All
" are optional. Items must be separated by a comma.
"	filler		Show filler lines, to keep the text synchronized with
"			a window that has inserted lines at the same position.
"			Mostly useful when windows are side-by-side and
"			"scrollbind" is set.
"	context:{n}	Use a context of {n} lines between a change and a fold
"			that contains unchanged lines. When omitted a context
"			of six lines is used.
"	icase		Ignore changes in case of text. "a" and "A" are
"			considered the same. Adds the "-i" flag to the "diff"
"			command if "diffexpr" is empty.
"	iwhite		Ignore changes in amount of whitespace. Adds the "-b"
"			flag to the "diff" command if "diffexpr" is empty.
"			Check the documentation of the "diff" command for what
"			this does exactly. It should ignore adding trailing
"			whitespace, but not leading whitespace.
"	horizontal	Start diff mode with horizontal splits (unless
"			explicitly specified otherwise).
"	vertical	Start diff mode with vertical splits (unless
"			explicitly specified otherwise).
"	foldcolumn:{n}	Set the "foldcolumn" option to {n} when starting diff
"			mode. Without this 2 is used.
set diffopt=filler,context:3,vertical,foldcolumn:3
"}}}

" {{{ dir
" List of directory names for the swap file, separated with commas.
let &dir=g:vimfiles . "/tmp"
"}}}

" {{{ display
" Change the way text is displayed. This is comma separated list of flags.
set display+=lastline
"}}}

" {{{ encoding
" Sets the character encoding used inside Vim. It applies to text in the
" buffers, registers, Strings in expressions, text stored in the viminfo file,
" etc. It sets the kind of characters which Vim can work with. See
" |encoding-names| for the possible values.
set encoding=utf-8
"}}}

" {{{ expandtab
" In Insert mode: Use the appropriate number of spaces to insert a <Tab>.
" Spaces are used in indents with the ">" and "<" commands and when
" "autoindent" is on. To insert a real tab when "expandtab" is on, use
" CTRL-V<Tab>. See also |:retab| and |ins-expandtab|.
set expandtab
"}}}

" {{{ foldcolumn
" When non-zero, a column with the specified width is shown at the side of the
" window which indicates open and closed folds. The maximum value is 12.
set foldcolumn=2
"}}}

" {{{ foldlevel
" Sets the fold level: Folds with a higher level will be closed. Setting this
" option to zero will close all folds. Higher numbers will close fewer folds.
" This option is set by commands like zm, zM and zR.
" See fold-foldlevel.
set foldlevel=0
"}}}

" {{{ foldlevelstart
" Sets "foldlevel" when starting to edit another buffer in a window. Useful to
" always start editing with all folds closed (value zero), some folds closed
" (one) or no folds closed (99).
" This is done before reading any modeline, thus a setting in a modeline
" overrules this option. Starting to edit a file for |diff-mode| also ignores
" this option and closes all folds.
" It is also done before BufReadPre autocommands, to allow an autocmd to
" overrule the "foldlevel" value for specific files.
" When the value is negative, it is not used.
set foldlevelstart=0
"}}}

" {{{ foldmethod
" The kind of folding used for the current window.
set foldmethod=syntax
"}}}

" {{{ foldnestmax
" Sets the maximum nesting of folds for the "indent" and "syntax" methods. This
" avoids that too many folds will be created. Using more than 20 doesn't work,
" because the internal limit is 20.
set foldnestmax=10
"}}}

" {{{ helpheight
" Minimal initial height of the help window when it is opened with the ":help"
" command. The initial height of the help window is half of the current
" window, or (when the "ea" option is on) the same as other windows. When the
" height is less than "helpheight", the height is set to "helpheight". Set to
" zero to disable.
set helpheight=0
"}}}

" {{{ helplang
" Comma separated list of languages. Vim will use the first language for which
" the desired help can be found. The English help will always be used as a
" last resort. You can add "en" to prefer English over another language, but
" that will only find tags that exist in that language and not in the English
" help.
set helplang=en,de
"}}}

" {{{ hlsearch
" When there is a previous search pattern, highlight all its matches. The type
" of highlighting used can be set with the "l" occasion in the "highlight"
" option. This uses the "Search" highlight group by default.
if &t_Co > 2
    set nohlsearch
endif
"}}}

" {{{ incsearch
" While typing a search command, show where the pattern, as it was typed so
" far, matches. The matched string is highlighted. If the pattern is invalid
" or not found, nothing is shown. The screen will be updated often, this is
" only useful on fast terminals.
set incsearch
"}}}

" {{{ joinspaces
" Insert two spaces after a '.', '?' and '!' with a join command. When
" "cpoptions" includes the "j" flag, only do this after a '.'. Otherwise only
" one space is inserted.
set nojoinspaces
"}}}

" {{{ laststatus
" The value of this option influences when the last window will have a status
" line:
"	0:	never
"	1:	only if there are at least two windows
"	2:	always
" The screen looks nicer with a status line if you have several windows, but
" it takes another screen line. |status-line|
set laststatus=2
"}}}

" {{{ lazyredraw
" When this option is set, the screen will not be redrawn while executing
" macros, registers and other commands that have not been typed. Also, updating
" the window title is postponed.
set lazyredraw
"}}}

" {{{ linebreak
" If on Vim will wrap long lines at a character in "breakat" rather than at
" the last character that fits on the screen. Unlike "wrapmargin" and
" "textwidth", this does not insert <EOL>s in the file, it only affects the
" way the file is displayed, not its contents. The value of "showbreak" is
" used to put in front of wrapped lines.
" This option is not used when the "wrap" option is off or "list" is on.
set linebreak
"}}}

" {{{ listchars
" Strings to use in "list" mode and for the |:list| command. It is a comma
" separated list of string settings.
set listchars="eol:$,tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+"
"}}}

" {{{ nrformats
" This defines what bases Vim will consider for numbers when using the CTRL-A
" and CTRL-X commands for adding to and subtracting from a number respectively;
" see |CTRL-A| for more info on these commands.
set nrformats="octal,hex"
"}}}

" {{{ number
" Print the line number in front of each line. When the "n" option is excluded
" from "cpoptions" a wrapped line will not use the column of line numbers
" (this is the default when "compatible" isn't set). The "numberwidth" option
" can be used to set the room used for the line number.
" When a long, wrapped line doesn't start with the first character, "-"
" characters are put before the number.
" See |hl-LineNr| for the highlighting used for the number.
" When setting this option, "relativenumber" is reset.
set number
"}}}

" {{{ numberwidth
" Minimal number of columns to use for the line number. Only relevant when the
" "number" or "relativenumber" option is set or printing lines with a line
" number. Since one space is always between the number and the text, there is
" one less character for the number itself.
" The value is the minimum width. A bigger width is used when needed to fit
" the highest line number in the buffer respectively the number of rows in the
" window, depending on whether "number" or "relativenumber" is set. Thus with
" the Vim default of 4 there is room for a line number up to 999. When the
" buffer has 1000 lines five columns will be used. The minimum value is 1, the
" maximum value is 10.
set numberwidth=5
"}}}

" {{{ path
" This is a list of directories which will be searched when using the |gf|,
" [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands, provided that
" the file being searched for has a relative path (not starting with "/", "./"
" or "../"). The directories in the "path" option may be relative or absolute.
set path+=.,~,~/git/**,~/repositories/**
"}}}

" {{{ previewheight
" Default height for a preview window.
set previewheight=5
"}}}

" {{{ pumheight
" Determines the maximum number of items to show in the popup menu for Insert
" mode completion. When zero as much space as available is used.
set pumheight=21
"}}}

" {{{ scrolloff
" Minimal number of screen lines to keep above and below the cursor. This will
" make some context visible around where you are working. If you set it to a
" very large value (999) the cursor line will always be in the middle of the
" window (except at the start or end of the file or when long lines wrap).
set scrolloff=3
"}}}

" {{{ sidescrolloff
" The minimal number of columns to scroll horizontally. Used only when the
" "wrap" option is off and the cursor is moved off of the screen. When it is
" zero the cursor will be put in the middle of the screen. When using a slow
" terminal set it to a large number or 0. When using a fast terminal use a small
" number or 1. Not used for "zh" and "zl" commands.
set sidescrolloff=5
"}}}

" {{{ sessionoptions
" Changes the effect of the mksession command. It is a comma separated list of
" words.
set sessionoptions-=folds,help,options sessionoptions+=localoptions,resize
"}}}

" {{{ shiftround
" Round indent to multiple of "shiftwidth". Applies to > and < commands. CTRL-T
" and CTRL-D in Insert mode always round the indent to a multiple of
" "shiftwidth" (this is Vi compatible).
set shiftround
"}}}

" {{{ shiftwidth
" Number of spaces to use for each step of (auto)indent. Used for |"cindent"|,
" |>>|, |<<|, etc.
set shiftwidth=4
"}}}

" {{{ shortmess
" This option helps to avoid all the |hit-enter| prompts caused by file
" messages, for example with CTRL-G, and to avoid some other messages.
set shortmess+=a
"}}}

" {{{ showmatch
" When a bracket is inserted, briefly jump to the matching one. The jump is
" only done if the match can be seen on the screen. The time to show the match
" can be set with "matchtime".
set showmatch
"}}}

" {{{ showtabline
" The value of this option specifies when the line with tab page labels will be
" displayed:
"   0: never
"   1: only if there are at least two tab pages
"   2: always
" This is both for the GUI and non-GUI implementation of the tab pages line.
set showtabline=2
"}}}

" {{{ smartindent
" Do smart autoindenting when starting a new line. Works for C-like programs,
" but can also be used for other languages. "cindent" does something like
" this, works better in most cases, but is more strict, see |C-indenting|.
" When "cindent" is on or "indentexpr" is set, setting "si" has no effect.
" "indentexpr" is a more advanced alternative.
set smartindent
"}}}

" {{{ smarttab
" When on, a <Tab> in front of a line inserts blanks according to
" "shiftwidth". "tabstop" or "softtabstop" is used in other places. A <BS>
" will delete a "shiftwidth" worth of space at the start of the line.
set smarttab
"}}}

" {{{ shell
" Name of the shell to use for ! and :! commands. When changing the value also
" check these options: "shelltype", "shellpipe", "shellslash" "shellredir",
" "shellquote", "shellxquote" and "shellcmdflag".
set shell=/bin/sh
"}}}

" {{{ softtabstop
" Number of spaces that a <Tab> counts for while performing editing
" operations, like inserting a <Tab> or using <BS>. It "feels" like <Tab>s are
" being inserted, while in fact a mix of spaces and <Tab>s is used. This is
" useful to keep the "ts" setting at its standard value of 8, while being able
" to edit like it is set to "sts". However, commands like "x" still work on
" the actual characters.
set softtabstop=4
"}}}

" {{{ spelllang
" A comma separated list of word list names. When the "spell" option is on
" spellchecking will be done for these languages. Example:
"	set spelllang=en_us,nl,medical
" This means US English, Dutch and medical words are recognized. Words that
" are not recognized will be highlighted.
" The word list name must not include a comma or dot. Using a dash is
" recommended to separate the two letter language name from a specification.
" Thus "en-rare" is used for rare English words. A region name must come last
" and have the form "_xx", where "xx" is the two-letter, lower case region
" name. You can use more than one region by listing them: "en_us,en_ca"
" supports both US and Canadian English, but not words specific for Australia,
" New Zealand or Great Britain.
if has("spell")
    set spelllang=de_20,de_de,de,en_us,en_gb,en
endif
"}}}

" {{{ spellsuggest
" Methods used for spelling suggestions.
set spellsuggest=best,10
"}}}

" {{{ splitbelow
" When on, splitting a window will put the new window below the current one.
set splitbelow
"}}}

" {{{ splitright
" When on, splitting a window will put the new window right of the current one.
set splitright
"}}}

" {{{ suffixes
" Files with these suffixes get a lower priority when multiple files match a
" wildcard. See |suffixes|. Commas can be used to separate the suffixes.
" Spaces after the comma are ignored. A dot is also seen as the start of a
" suffix. To avoid a dot or comma being recognized as a separator, precede it
" with a backslash (see |option-backslash| about including spaces and
" backslashes).
" See "wildignore" for completely ignoring files. The use of |:set+=| and
" |:set-=| is preferred when adding or removing suffixes from the list. This
" avoids problems when a future version uses another default.
set suffixes+=.info,.aux,.log,.dvi,.bbl,.out,.bak
"}}}

" {{{ swapfile
" Use a swapfile for the buffer. This option can be reset when a swapfile is
" not wanted for a specific buffer. For example, with confidential information
" that even root must not be able to access. Careful: All text will be in
" memory:
"	- Don't use this for big files.
"	- Recovery will be impossible!
" A swapfile will only be present when |"updatecount"| is non-zero and
" "swapfile" is set.
" When "swapfile" is reset, the swap file for the current buffer is
" immediately deleted. When "swapfile" is set, and "updatecount" is non-zero,
" a swap file is immediately created.
" Also see |swap-file| and |"swapsync"|.
set noswapfile
"}}}

" {{{ switchbuf
" This option controls the behavior when switching between buffers.
set switchbuf+=usetab
"}}}

" {{{ tabpagemax
" Maximum number of tab pages to be opened by the |-p| command line argument or
" the ":tab all" command.
set tabpagemax=20
"}}}

" {{{ termencoding
" Encoding used for the terminal. This specifies what character encoding the
" keyboard produces and the display will understand. For the GUI it only
" applies to the keyboard ("encoding" is used for the display). Except for the
" Mac when "macatsui" is off, then "termencoding" should be "macroman".
set termencoding=utf-8
"}}}

" {{{ ttimeout
" These two options together determine the behavior when part of a mapped key
" sequence or keyboard code has been received.
set ttimeout
"}}}

" {{{ ttimoutlen
" The time in milliseconds that is waited for a key code or mapped key sequence
" to complete. Also used for CTRL-\ CTRL-N and CTRL-\ CTRL-G when part of a
" command has been typed.
set ttimeoutlen=100
"}}}

" {{{ title
" When on, the title of the window will be set to the value of "titlestring" (if
" it is not empty)
if &term=~ "rxvt" || &term=~ "screen" || &term=~ "term"
    if &term=~ "screen"
        set t_ts=k
        set t_fs=\
    endif
    set title
endif
"}}}

" {{{ titlelen
" Gives the percentage of "columns" to use for the length of the window title.
" When the title is longer, only the end of the path name is shown.  A "<"
" character before the path name is used to indicate this. Using a percentage
" makes this adapt to the width of the window.  But it won't work perfectly,
" because the actual number of characters available also depends on the font
" used and other things in the title bar.  When "titlelen" is zero the full path
" is used.  Otherwise, values from 1 to 30000 percent can be used.
set titlelen=50
"}}}

" {{{ titleold
" This option will be used for the window title when exiting Vim if the original
" title cannot be restored. Only happens if "title" is on or "titlestring" is
" not empty.
set titleold=Shell
"}}}

" {{{ titlestring
" When this option is not empty, it will be used for the title of the window.
" This happens only when the "title" option is on. Only works if the terminal
" supports setting window titles (currently Amiga console, Win32 console, all
" GUI versions and terminals with a non-empty "t_ts" option).
" let &titlestring="vim: (" . expand("%:t") . ")"
set titlestring=VIm:\ %.25t\ %a%r%m
"}}}

if has("persistent_undo")
    " {{{ undodir
    " List of directory names for undo files, separated with commas. See "backupdir"
    " for details of the format.
    " "." means using the directory of the file. The undo file name for "file.txt"
    " is ".file.txt.un~". For other directories the file name is the full path of
    " the edited file, with path separators replaced with "%".
    " When writing: The first directory that exists is used. "." always works, no
    " directories after "." will be used for writing.
    " When reading all entries are tried to find an undo file. The first undo file
    " that exists is used. When it cannot be read an error is given, no further
    " entry is used.
    if has("nvim")
        let &undodir = escape(expand("~/.local/share/nvim/undo"), " ")
    else
        let &undodir = escape(expand("~/.local/share/vim/undo"), " ")
    endif
    "}}}

    " {{{ undofile
    " When on, Vim automatically saves undo history to an undo file when writing
    " a buffer to a file, and restores undo history from the same file on buffer
    " read.
    " The directory where the undo file is stored is specified by "undodir". For
    " more information about this feature see |undo-persistence|. The undo file
    " is not read when "undoreload" causes the buffer from before a reload to be
    " saved for undo.
    " When "undofile" is turned off the undo file is NOT deleted.
    set undofile
    "}}}
endif

" {{{ viminfo
" When non-empty, the viminfo file is read upon startup and written when
" exiting Vim (see |viminfo-file|). The string should be a comma separated
" list of parameters, each consisting of a single character identifying the
" particular parameter, followed by a number or string which specifies the
" value of that parameter. If a particular character is left out, then the
" default value is used for that parameter. The following is a list of the
" identifying characters and the effect of their value.
if has("nvim")
    set shada=!,'50,/100,:100,<1000,h,s1000,n~/.cache/nvim/shada
else
    set viminfo=!,'50,/100,:100,<1000,h,s1000,n~/.cache/vim/info
endif
"}}}

" {{{ visualbell
" Use visual bell instead of beeping.
set visualbell
"}}}

" {{{ wildignore
" A list of file patterns. A file that matches with one of these patterns is
" ignored when completing file or directory names, and influences the result of
" |expand()|, |glob()| and |globpath()| unless a flag is passed to disable this.
if has("wildignore")
    set wildignore=*.sw[a-z],*.bak,*.pyc,*/.git/*,*/.hg/*,*/.svn/*
endif
"}}}

" {{{ wildignorecase
" When set case is ignored when completing file names and directories. Has no
" effect on systems where file name case is generally ignored. Does not apply
" when the shell is used to expand wildcards, which happens when there are
" special characters.
if exists('&wildignorecase')
    set wildignorecase
endif
"}}}

" {{{ wildmenu
" When "wildmenu" is on, command-line completion operates in an enhanced mode.
" On pressing "wildchar" (usually <Tab>) to invoke completion, the possible
" matches are shown just above the command line, with the first match
" highlighted (overwriting the status line, if there is one). Keys that show
" the previous/next match, such as <Tab> or CTRL-P/CTRL-N, cause the highlight
" to move to the appropriate match. When "wildmode" is used, "wildmenu" mode
" is used where "full" is specified. "longest" and "list" do not start
" "wildmenu" mode. If there are more matches than can fit in the line, a ">"
" is shown on the right and/or a "<" is shown on the left. The status line
" scrolls as needed.
set wildmenu
"}}}

" {{{ wildmode
" Completion mode that is used for the character specified with "wildchar". It
" is a comma separated list of up to four parts. Each part specifies what to
" do for each consecutive use of "wildchar". The first part specifies the
" behavior for the first use of "wildchar", The second part for the second
" use, etc.
set wildmode="list:longest"
"}}}

" {{{ winheight
" Minimal number of lines for the current window. This is not a hard minimum,
" Vim will use fewer lines if there is not enough room. If the focus goes to a
" window that is smaller, its size is increased, at the cost of the height of
" other windows.
if &diff
    set winheight=15
else
    set winheight=3
endif
"}}}

"{{{ winfixheight
" Keep the window height when windows are opened or closed and "equalalways"
" is set. Also for |CTRL-W_=|. Set by default for the |preview-window| and
" |quickfix-window|.
" The height may be changed anyway when running out of room.
set winfixheight
"}}}

" {{{ winfixwidth
" Keep the window width when windows are opened or closed and "equalalways" is
" set. Also for |CTRL-W_=|.
" The width may be changed anyway when running out of room.
set winfixwidth
"}}}

" {{{ wrapmargin
" Number of characters from the right window border where wrapping starts.
" When typing text beyond this limit, an <EOL> will be inserted and inserting
" continues on the next line.
" Options that add a margin, such as "number" and "foldcolumn", cause the text
" width to be further reduced. This is Vi compatible. When "textwidth" is
" non-zero, this option is not used.
" See also "formatoptions" and |ins-textwidth|. {Vi: works differently and
" less usefully}
set wrapmargin=5
"}}}
"}}}

" {{{ abbreviation
" this is usefull when your name René is
iabbrev 'e é
"}}}

" {{{ highlight
" {{{ highlight for spell checking
highlight SpellBad term=standout ctermfg=white ctermbg=red cterm=underline term=underline
highlight SpellCap term=underline cterm=underline
highlight SpellRare term=underline cterm=underline
highlight SpellLocal term=underline cterm=underline
"}}}

" {{{ highlight for searching
highlight Search ctermfg=black ctermbg=lightblue cterm=italic,underline guifg=white guibg=blue
"}}}

" {{{ nice color for completion menu
highlight Pmenu ctermfg=white ctermbg=black guifg=lightgray guibg=black
highlight PmenuSel ctermfg=black ctermbg=lightblue cterm=bold guifg=black guibg=lightblue gui=bold
"}}}

" {{{ ShowTrailingWhitespace
highlight ShowTrailingWhitespace ctermbg=darkgreen guibg=darkgreen
"}}}

" {{{ IndentGuides
highlight IndentGuidesOdd guibg=darkgrey ctermbg=darkgrey
highlight IndentGuidesEven guibg=black ctermbg=black
"}}}
"}}}

" vim: filetype=vim textwidth=80 foldmethod=marker
